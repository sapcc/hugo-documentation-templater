[{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/docs/","tags":"","title":"Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/tags/helpers/","tags":"","title":"Helpers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/tags/markdown/","tags":"","title":"Markdown"},{"body":"This section serves as a quick reference for users already familiar with Markdown, offering a reminder of its core syntax. Additionally, it describes the tools and extensions provided by this templater that enhance standard Markdown, allowing you to create more dynamic and engaging documentation.\nCheat Sheet ## Text Formatting _italic_ **bold** ~~strikethrough~~ ## Headings # Heading 1 ## Heading 2 ### Heading 3 ## Bulleted Lists - Item 1 - Item 2 - Item 3 ## Numbered Lists 1. Item 1 2. Item 2 3. Item 3 ## Links [Link Text](URL) ## Images ![Alt Text](Image URL) ## Code Blocks To create a code block in Docsy, use three backticks followed by the language identifier: ```python print(\"Hello, World!\") ``` ## Inline Code Use single backticks (`) to mark inline code. ## Tables | Column 1 | Column 2 | | --------- | --------- | | Content 1 | Content 2 | | Content 3 | Content 4 | ## Blockquotes \u003e This is a blockquote. ## Horizontal Lines --- ## Comments \u003c!-- This is a comment and will not be displayed. --\u003e ## Escape Characters Use the backslash (\\) to escape special characters that are Markdown syntax characters. ## Docsy-Specific Extensions Docsy provides additional features and extensions specifically designed for documentation with Docsy. Refer to the Docsy documentation for more information. Enhanced Guide: In-Depth Explanation Front Matter The front matter is the metadata attached to e.g. markdown files. It can be formatted in TOML, YAML or JSON — in these docs YAML is used. This should be continued for consistency.\nExample:\nThis is the front matter used in this article:\n--- title: Markdown Helpers weight: 2 tags: [\"contribution\", \"markdown\", \"helpers\"] --- More details from hugo documentation\nHeadings Headings should be used to structure documents in semantically useful parts. The primary heading is set by the frontmatter and should not be used inside the document.\nAnchors Headings generally create anchors that can be referenced as described in link help. Anchors are lowercase, spaces are replaced by - and if it is not unique suffixed by -NUMBER (NUMBER replaced of course).\nIf some heading should have a non-generated anchor it can be overwritten/specified by a special suffix like\n## Heading 2 {#some-other-string}or ## Headings 2 {id=\"something-different\"}\nMarkdown Rendered Output # Heading level 1 \u003ch1\u003eHeading level 1\u003c/h1\u003e ## Heading level 2 \u003ch2\u003eHeading level 2\u003c/h2\u003e ### Heading level 3 \u003ch3\u003eHeading level 3\u003c/h3\u003e #### Heading level 4 \u003ch4\u003eHeading level 4\u003c/h4\u003e ##### Heading level 5 \u003ch5\u003eHeading level 5\u003c/h5\u003e ###### Heading level 6 \u003ch6\u003eHeading level 6\u003c/h6\u003e Tags Just adopt the File header by category and a tags array to add them.\nExample:\n--- title: \"SEM - Playbooks\" description: \"This documentation contains the SEM playbooks\" categories: [\"Security\"] tags: [\"Security management\", \"Security\", \"SEM\", \"Playbooks\"] --- An overiew can be found on the internal tag page.\nPlease consider to limit the ammount of labels.\nBlockquotes Markdown uses \u003e (greater than) characters for blockquoting.\nLorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nDonec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\u003e Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \u003e Aliquam hendrerit mi posuere lectus. \u003e \u003e Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse \u003e id sem consectetuer libero luctus adipiscing. Blockquotes can be nested.\nLorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Donec sit amet nisl.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n\u003e Lorem ipsum dolor sit amet, consectetuer adipiscing elit. \u003e \u003e \u003e Aliquam hendrerit mi posuere lectus. Donec sit amet nisl. \u003e \u003e Suspendisse id sem consectetuer libero luctus adipiscing. Code Blocks This is a code block created by three backticks (\"code fences\") ``` - each on its own line. It is also possible to use indentation by at least one tab (or 4 spaces). This method with backticks is strongly preferred as it is much more explicit and less error prone than an indentation. In Markdown this would look like this:\n``` This is a code block. ``` This is an example for inline code.\nIn Markdown this would look like this:\nThis is an example for `inline code`. Syntax Highlighting Original documentation: https://gohugo.io/content-management/syntax-highlighting/#highlight-shortcode\nTo enable syntax highlighting the language of the block has to be specified. Additionally various options can be added (see further down).\n```xml \u003csomthing\u003e\u003c/something\u003e ``` Options:\nlinenos: configure line numbers. Valid values are true, false, \u003e table, or inline. false will turn off line numbers if it’s configured \u003e to be on in site config. table will give \u003e copy-and-paste friendly code blocks. hl_lines: lists a set of line numbers or line number ranges to be \u003e highlighted. linenostart=199: starts the line number count from 199. anchorlinenos: Configure anchors on line numbers. Valid values are true \u003e or false; lineanchors: Configure a prefix for the anchors on line numbers. Will be \u003e suffixed with -, so linking to the line number 1 with the option \u003e lineanchors=prefix adds the anchor prefix-1 to the page. Highlighting in Code Fences Highlighting in markdowns’ code fences is also possible:\n```go {linenos=table,hl_lines=[2,4]} // ... code ``` Creates:\n1 2 3 4 5 6 // comment // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title Highlighting with Shortcode {{\u003c highlight go \"linenos=table,hl_lines=2 4\" \u003e}} // ... code {{\u003c /highlight \u003e}} 1 2 3 4 5 6 // comment // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \"go\": return strings.Title Example of a Highlighted Code Block with Line Numbers, Highlighted Lines and highlighting dot The following is an extensive example demonstrating various features. Line numbers are displayed, and lines 3, 4, 15, and 16 are highlighted to make two code snippets more visible. Additionally, the first snippet is marked with a dot to further enhance its visibility.\n```react {linenos=true,hl_lines=[3,4,15,16],linenostart=1} // App.jsx const App = (props = {}) =\u003e { {{\u003c label \"danger\" \u003e}}1{{\u003c /label \u003e}} useUrlState(props?.id || \"doop\") {{\u003c highlight-dot \u003e}} return ( \u003cMessagesProvider\u003e \u003cAppShell pageHeader={`Doop`} contentHeading={`Decentralized Observer of Policies ${ props.displayName ? ` - ${props.displayName}` : \"\" }`} embedded={props.embedded === true} \u003e {{\u003c label \"danger\" \u003e}}2{{\u003c /label \u003e}} \u003cAsyncWorker consumerId={props.id || \"doop\"} /\u003e [...] \u003c/AppShell\u003e \u003c/MessagesProvider\u003e ) } ``` Creates:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // App.jsx const App = (props = {}) =\u003e { 1 useUrlState(props?.id || \"doop\") return ( \u003cMessagesProvider\u003e \u003cAppShell pageHeader={`Doop`} contentHeading={`Decentralized Observer of Policies ${ props.displayName ? ` - ${props.displayName}` : \"\" }`} embedded={props.embedded === true} \u003e 2 \u003cAsyncWorker consumerId={props.id || \"doop\"} /\u003e [...] \u003c/AppShell\u003e \u003c/MessagesProvider\u003e ) } Emphasis single asterisks double asterisks In markdown:\n_single asterisks_ **double asterisks** To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it.\nDiagram draw.io / diagrams.net\nTo use diagrams created with draw.io you need to save the it in the .drawio format.\nFile -\u003e Save as -\u003e Format: XML File (.drawio)\nAfter you have created your .drawio file you have to push it to the desired location.\nNow to use the diagram you will have to include it in your document with the absolute path like this:\n{{\u003c diagramsnet file=\"source/help/diagram-drawio-example.drawio\" \u003e}} Hints Create a color-coded box.\n{{\u003c hint [info|success|warning|danger|default|white] \u003e}} **Markdown content**\\ Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. {{\u003c /hint \u003e}} Examples:\n**Info: Markdown content**\nDolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Success Warning Danger Default White Images You can do it in different ways\n1. with figure (recommended) {{\u003c figure src=\"/help/monsoon_logo.png\" title=\"This is the old Monsoon 3 logo!\" \u003e}} Don’t add an empty title=\"\" to a {{ figure }} if you dont provide a proper alt/subtext If the pics are in a subfolder, just write src=\"your-directory/monsoon_logo.png\" Further examples and additional formatting options in the hugo documentation.\n2. Markdown Alternative syntax is pur Markdown - which is not recommended as it\nis not properly styled does not show a caption for the image won’t work inside lists and code blocks ![Alt text which describes the used image if required](/monsoon_logo.png) 3. Hugo Image Processing Hugo image processing.\nFurther examples and other options in the hugo documentation.\nLabels / Badges Create a color-coded inline box.\nAdd any of the below mentioned modifier classes to change the appearance of a label.\n{{\u003c label \"success\" \u003e}}example success{{\u003c /label \u003e}} {{\u003c label \"danger\" \u003e}}example danger{{\u003c /label \u003e}} {{\u003c label \"warning\" \u003e}}example warning{{\u003c /label \u003e}} {{\u003c label \"info\" \u003e}}example info{{\u003c /label \u003e}} {{\u003c label \"dark\" \u003e}}example dark{{\u003c /label \u003e}} Examples:\nexample success example danger example warning example info example dark Links Link Markup Markdown supports various link types, the most commonly is an inline link. Other more complex variants are explained in the commonmark spec.\nInline Links This is an example inline link: sap.com\nThis is an example inline link: [sap.com](http://www.sap.cpm) Anchors If you want to jump to a specific heading on a page, you can reference anchors.\nThis is an example reference-style link.\nThis is [an example](#ref) reference-style link. Internal Links Internal links should be created with a special shortcode:\nThis is a link inside the docs. The first argument is the filename that should be linked. Hugo will try to find the proper file+path by itself. If two files have the same name you have to specify the path as the pages will not be generated otherwise.\nThe file extension is not required.\nThis is [a link]({{\u003c relref \"front_matter.md\" \u003e}}) inside the docs. This is [a link]({{\u003c relref \"install\" \u003e}}) inside the docs which would not work as it is ambiguous. This is [a link]({{\u003c relref \"/docs/install/manila/deployment\" \u003e}}) inside the docs with full path to the document. Lists Markdown supports ordered (numbered) and unordered (bulleted) lists.\nDon’t add empty lines inside a list or it will create a new list for each point Unordered List 1st item 2nd item 1st sub-item of 2nd item 3rd item - 1st item - 2nd item - 1st sub-item of 2nd item - 3rd item Ordered List 1st item 2nd item 3rd item 1. 1st item 1. 2nd item 1. 3rd item Notice the actual value of the number doesn’t matter in the list result. However, using the proper number improves readability.\nCombined List Item 1 Item 2 Subitem 1 Subitem 2 Item 3 - Item 1 - Item 2 1. Subitem 1 1. Subitem 2 - Item 3 Paragraphs A paragraph is one or more consecutive lines of text separated by one or more blank lines.\nThis is the first paragraph.\nThis is the second paragraph.\nThis is the first paragraph. This is the second paragraph. Tables | State | Description | | --------- | ------------------------------- | | Queued | Lorem ipsum dolor sit amet, ... | | Executing | Lorem ipsum dolor sit amet, ... | | Failed | Lorem ipsum dolor sit amet, ... | | Complete | Lorem ipsum dolor sit amet, ... | State Description Queued Lorem ipsum dolor sit amet, … Executing Lorem ipsum dolor sit amet, … Failed Lorem ipsum dolor sit amet, … Complete Lorem ipsum dolor sit amet, … For more complex tables (e.g. multiple paragraphs in one cell) you will have to use HTML markup in your Markdown document.\nDiagrams Mermaid Original documentation: https://geekdocs.de/shortcodes/mermaid/\nLive Editor to test diagrams: https://mermaid-js.github.io/mermaid-live-editor\n```mermaid sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end ``` sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end Nomnoml Nomnoml is a tool to draw UML diagrams based on a simple syntax. Further details can be obtained at https://www.nomnoml.com/ or the github repo.\nExample:\n```nomnoml [Pirate|eyeCount: Int|raid();pillage()| [beard]--[parrot] [beard]-:\u003e[foul mouth] ] [\u003cabstract\u003eMarauder]\u003c:--[Pirate] [Pirate]- 0..7[mischief] [jollyness]-\u003e[plunder] [jollyness]-\u003e[rum] [jollyness]-\u003e[singing] [Pirate]-\u003e *[rum|tastiness: Int|swig()] [Pirate]-\u003e[singing] [singing]\u003c-\u003e[rum] [\u003cstart\u003est]-\u003e[\u003cstate\u003eplunder] [plunder]-\u003e[\u003cchoice\u003emore loot] [more loot]-\u003e[st] [more loot] no -\u003e[\u003cend\u003ee] [\u003cactor\u003eSailor] - [\u003cusecase\u003eshiver me;timbers] ``` BPMN bpmn-js is a library for rendering and interacting with BPMN 2.0 diagrams directly in the browser. Further details can be found at https://bpmn.io/toolkit/bpmn-js/ or the GitHub repository.\nInline Useful for small diagrams that can be included directly in the markdown file. The BPMN code should be enclosed in triple backticks with the bpmn language identifier.\nAttributes\nThe size parameter is optional and can be used to set the height of the diagram. The default value is small, which sets the height to 400px. Other options are medium (600px) and large (800px). ```bpmn{size=\"small\"} \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cbpmn:definitions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:bpmn=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" id=\"Definitions_1\" targetNamespace=\"http://bpmn.io/schema/bpmn\"\u003e \u003cbpmn:process id=\"Process_1\" isExecutable=\"false\"\u003e \u003cbpmn:startEvent id=\"StartEvent_1\" name=\"Start\" /\u003e \u003cbpmn:task id=\"Task_1\" name=\"Do Something\" /\u003e \u003cbpmn:endEvent id=\"EndEvent_1\" name=\"End\" /\u003e \u003cbpmn:sequenceFlow id=\"Flow_1\" sourceRef=\"StartEvent_1\" targetRef=\"Task_1\" /\u003e \u003cbpmn:sequenceFlow id=\"Flow_2\" sourceRef=\"Task_1\" targetRef=\"EndEvent_1\" /\u003e \u003c/bpmn:process\u003e \u003cbpmndi:BPMNDiagram id=\"BPMNDiagram_1\"\u003e \u003cbpmndi:BPMNPlane id=\"BPMNPlane_1\" bpmnElement=\"Process_1\"\u003e \u003cbpmndi:BPMNShape id=\"StartEvent_1_di\" bpmnElement=\"StartEvent_1\"\u003e \u003cdc:Bounds x=\"100\" y=\"100\" width=\"36\" height=\"36\"/\u003e \u003c/bpmndi:BPMNShape\u003e \u003cbpmndi:BPMNShape id=\"Task_1_di\" bpmnElement=\"Task_1\"\u003e \u003cdc:Bounds x=\"170\" y=\"90\" width=\"100\" height=\"56\"/\u003e \u003c/bpmndi:BPMNShape\u003e \u003cbpmndi:BPMNShape id=\"EndEvent_1_di\" bpmnElement=\"EndEvent_1\"\u003e \u003cdc:Bounds x=\"300\" y=\"100\" width=\"36\" height=\"36\"/\u003e \u003c/bpmndi:BPMNShape\u003e \u003cbpmndi:BPMNEdge id=\"Flow_1_di\" bpmnElement=\"Flow_1\"\u003e \u003cdi:waypoint x=\"136\" y=\"118\"/\u003e \u003cdi:waypoint x=\"170\" y=\"118\"/\u003e \u003c/bpmndi:BPMNEdge\u003e \u003cbpmndi:BPMNEdge id=\"Flow_2_di\" bpmnElement=\"Flow_2\"\u003e \u003cdi:waypoint x=\"270\" y=\"118\"/\u003e \u003cdi:waypoint x=\"300\" y=\"118\"/\u003e \u003c/bpmndi:BPMNEdge\u003e \u003c/bpmndi:BPMNPlane\u003e \u003c/bpmndi:BPMNDiagram\u003e \u003c/bpmn:definitions\u003e ``` Frome file Useful for larger diagrams that are stored in a separate file. When using this method a link View in Fullscreen will be created, which allows users to view the diagram in a larger format.\nAttributes\nThe path parameter must be the absolute path to the BPMN file within the repository. Only paths without an http or https prefix are allowed. The shortcode automatically prepends the site’s base URL to the specified path. The size parameter is optional and can be used to set the height of the diagram. The default value is small, which sets the height to 400px. Other options are medium (600px) and large (800px). {{\u003c bpmn path=\"/bpmn/example.bpmn\" size=\"small\"\u003e}} View in Fullscreen ","categories":"","description":"","excerpt":"This section serves as a quick reference for users already familiar …","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/docs/markdown-helpers/","tags":["markdown","helpers"],"title":"Markdown Helpers"},{"body":"","categories":"","description":"","excerpt":"","ref":"/hugo-documentation-templater/pr-preview/pr-28/custom/tags/","tags":"","title":"Tags"}]